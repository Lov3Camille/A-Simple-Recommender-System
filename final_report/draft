Recommend system

Normally there are many mature algorithms for recommender systems, such as Collaborative filtering (CF) and its modifications, which is one of the most commonly used recommendation algorithms. Another algorithm is Matrix decomposition for recommendations, which is a very elegant recommendation algorithm because usually, when it comes to matrix decomposition, we donâ€™t give much thought to what items are going to stay in the columns and rows of the resulting matrices. Furthermore, some rather simple algorithms such as Clustering is more suitable for small systems. And due to a huge leap in growth on neural networks in the last 10 years, Deep learning approach for recommendations is also applied in a wide range of applications and are gradually replacing traditional ML methods.

Considering this recommender system is based on frequent item sets that are generated by A-Priori algorithm mentioned above, machined learning methods may be infeasible here. Two main reasons is sufficient to support this conclusion. First, upon the datasets become very large, the memory requirements for the presentation of data grows exponentially. Second, due to the fact that the size of the available purchase database is usually growing linearly in the actual business scenes while the data grow exponentially with the size of the product assortment, they are incompatible with each other.

In this case, we are pursuing a very different approach which is based on the frequent item sets and following steps are based on the frequent item sets for generating a decision tree. 
In the following sections, we will display a sample to clarify this approach more explicitly.

Based on the A-Priori algorithm and Hadoop platform, we generate frequent item sets with size from 1 to 5. Benefiting from the distributed system, this process is fast. Final results is large, Table 1 just represent few parts of them.


The actual support is much larger than what is shown in above samples, to simplify the explanation, we define the item set as a frequent item set if and only if its support threshold exceeds 2, in this case, all single item except {B} and empty set would be considered as frequent item sets, but normally we exclude the empty set. With the utilization of frequent item sets of size from 1 to 4, it is now sufficient to implement the recommendation. One basic train of thought is to directly recommend these item sets, however, considering that one frequent item set in the whole purchasing history dataset may not be applicable to a specific user such as item A in the sample is not even in the basket of user 005. In this case, it is necessary to realize a precise recommendation.

To achieve a precise practical personalized recommendation, a general idea is organize these frequent item sets together with original purchase history dataset. In this section, we mainly talk about the adjacency of frequent item sets. Based on the A-Priori algorithm, it is distinct that frequent item sets with size 2 must conclude part of single frequent items, and this pattern is scalable for other sizes' item sets. Figure 5 shows an intuitive structure of this pattern.

A Decision Tree is a predictive model expressed as a recursive partition of the feature space to subspaces that constitute a basis for prediction. A Decision Tree is rooted directed tree and all other nodes are terminal nodes or leaves of the Decision Trees. In our case, nodes with outgoing edges are the previous frequent item sets.  Decision Trees classify using a set of hierarchical decisions on the features. The decisions made at previous nodes are the split criterion, which is trying to find a frequent item sets with their sizes all one more than the previous item set's size. The root of this decision tree can be generated from another criterion, which is trying to find the 5 most frequent single items in the whole purchase history dataset and simultaneously in the specific user's purchase histories. In the basis of the two criteria, we do not need to make use of complex Machine Learning methodologies, it would be simple and efficient to make a precise personalized recommendation. Furthermore, decision trees can be conveniently induced, exchanged, and visualized by many tools, which would make it convenient to analyze the final results.

This recommender system would satisfy one user's personalized recommendation once a time. In brief, one user enter in his userId and then 5 most frequent items which has been viewed by him would show up. Based on his own choice of whether this recommendation needs to be continued, for example, if he choose one of the single item and wants to be recommended more items, all frequent item pairs including the previous chosen item would show up. This process would stop upon the item sets with size of 4 show up. 